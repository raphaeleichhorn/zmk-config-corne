/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// kp values according to US keyboard, but in layout visualization adapted to CH layout

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        behaviours {
// Chained mods for backspace, delete on shift and umlaut ue on alt on same key
                DEL_UE: delete_ue {
                        compatible = "zmk,behaviour-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp BKSP>, <&kp LBKT>;
                        mods = <(MOD_LALT|MOD_RALT)>;
                };
                
                BKSP_DEL_UE: backspace_delete_ue {
                        compatible = "zmk,behaviour-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&DEL_UE>, <&kp DELETE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

// Mod for adding exclamation point to oe umlaut
                OE_EXC: oe_exclamation {
                        compatible = "zmk,behaviour-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp SEMI>, <&kp RBRC>; 
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

// Mod for adding question mark to ae umlaut
                AE_Q: ae_questionmark {
                        compatible = "zmk,behaviour-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp SQT>, <&kp UNDER>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
        };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri-layer {
                        if-layers = <3 4>;
                        then-layer = <5>;
                };
        };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Z  |  U   |  I  |  O  |  P   | BKSP_DEL_UE |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |OE_EXC| AE_Q |
// | SHFT |  Y  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  -   | RSHFT|
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T       &kp Y &kp U  &kp I     &kp O   &kp P    &BKSP_DEL_UE
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G       &kp H &kp J  &kp K     &kp L   &OE_EXC  &AE_Q
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B       &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &kp LGUI &lt 3 ESC &kp SPACE   &kp RET &mo 4 &kp LALT
                        >;
                };

                gaming_layer1 {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Z  |  U   |  I  |  O  |  P   | BKSP_DEL_UE |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |OE_EXC| AE_Q |
// | SHFT |  Y  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  -   | RSHFT|
//                    | GUI | GL2 | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T        &kp Y &kp U  &kp I     &kp O   &kp P    &BKSP_DEL_UE
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G        &kp H &kp J  &kp K     &kp L   &OE_EXC  &AE_Q
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B        &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &kp LGUI &lt 2 ESC &kp SPACE    &kp RET &mo 4 &kp LALT
                        >;
                };
                
                gaming_layer2 {
// -----------------------------------------------------------------------------------------
// |  §   |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP_DEL_UE |
// | CTRL |     |     |     |     |K_MUT|   |     |     |     |     |     |     |
// | SHFT |AltTb|     |     |     |K_PP |   |     |     |     |     |     | DEF |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp GRAVE &kp N1        &kp N2    &kp N3     &kp N4     &kp N5              &kp N6    &kp N7   &kp N8   &kp N9  &kp N0  &BKSP_DEL_UE
   &kp LCTRL &trans        &trans    &trans     &trans     &kp K_MUTE          &trans    &trans   &trans   &trans  &trans  &trans
   &kp LSHFT &kp LALT(TAB) &trans    &trans     &trans     &kp K_PLAY_PAUSE    &trans    &trans   &trans   &trans  &trans  &tog 0
                                     &kp LGUI   &trans     &kp SPACE           &kp RET   &trans   &kp LALT
                        >;
                };       

                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB | HOM |  UP | END |PGUP |     |   |  /  |  7  |  8  |  9  |  -  | BKSP_DEL_UE |
// | CTRL | LFT | DWN | RGT |PGDN |K_MUT|   |  *  |  4  |  5  |  6  |  +  |  =  |
// | SHFT |AltTb| BKSP| DEL |     |K_PP |   | CAPS|  1  |  2  |  3  |  .  | ENT |
//                    | GUI |     | SPC |   | ENT |     |  0  |
                        bindings = <
   &kp TAB   &kp HOME      &kp UP     &kp END    &kp PG_UP    &trans              &kp KP_DIVIDE   &kp N7  &kp N8  &kp N9  &kp KP_MINUS &BKSP_DEL_UE
   &kp LCTRL &kp LEFT      &kp DOWN   &kp RIGHT  &kp PG_DN    &kp K_MUTE          &kp KP_MULTIPLY &kp N4  &kp N5  &kp N6  &kp KP_PLUS  &kp KP_EQUAL
   &kp LSHFT &kp LALT(TAB) &kp BKSP   &kp DEL    &trans       &kp K_PLAY_PAUSE    &kp CAPS        &kp N1  &kp N2  &kp N3  &kp KP_DOT   &kp KP_ENTER
                                      &kp LGUI   &trans       &kp SPACE           &kp RET         &trans  &kp N0
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  +  |  "  |  *  |  ç  |  %  |   |  &  |  /  |  (  |  )  |  =  |  ^   |
// | CTRL |     |  '  |     |     |     |   |     |     |  [  |  ]  |  \  |  ~   |
// | SHFT |     |  @  |     |     |     |   |     |     |  {  |  }  | "|" |  °   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB   &kp PLUS  &kp AT        &kp HASH &kp DLLR &kp PRCNT    &kp CARET &kp AMPS  &kp ASTRK      &kp LPAR       &kp RPAR     &kp EQUAL
   &kp LCTRL &trans    &kp MINUS     &trans   &trans   &trans       &trans    &trans    &kp RALT(LBKT) &kp RALT(RBKT) &kp NUBS     &kp RALT(EQUAL)
   &kp LSHFT &trans    &kp RALT(N2)  &trans   &trans   &trans       &trans    &trans    &kp RALT(SQT)  &kp RALT(BSLH) &kp RALT(N7) &kp TILDE
                                 &kp LGUI &trans   &kp SPACE    &kp RET   &trans    &kp LALT
                        >;
                };

                tri_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |     |     |     |     |     |   |     |     |     |     |     |     |
// | CTRL |     |     |     |     | GL1 |   |     |     |     |     |     |     |
// | SHFT |     |     |     |     |     |   | BT1 | BT2 | BT3 | BT4 | BT5 |BTCLR|
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &trans   &trans &trans   &trans   &trans       &trans   &trans   &trans &trans    &trans &trans
   &kp LCTRL &trans   &trans &trans   &trans   &tog 1       &trans   &trans   &trans &trans    &trans &trans
   &kp LSHFT &trans   &trans &trans   &trans   &trans       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
                             &kp LGUI &trans   &kp SPACE    &kp RET   &trans    &kp LALT
                        >;
                };

      
        };
};
