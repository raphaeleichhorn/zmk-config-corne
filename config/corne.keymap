/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// kp values according to US keyboard, but in layout visualization adapted to CH layout

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        behaviors {
// Chained mods for backspace, delete on shift and umlaut ue on alt on same key
                DEL_UE: delete_ue {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp BKSP>, <&kp LBKT>;
                        mods = <(MOD_LALT|MOD_RALT)>;
                };
                
                BKSP_DEL_UE: backspace_delete_ue {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&DEL_UE>, <&kp DELETE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

// Mod for adding exclamation point and slash to oe umlaut
                OE_EXC: oe_exclamation {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp SEMI>, <&kp RBRC>; 
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                OE_EXC_SL: oe_exclamation_slash {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&OE_EXC>, <&kp AMPS>; 
                        mods = <(MOD_LALT|MOD_RALT)>;
                };                

// Mod for adding question mark and backslash to ae umlaut
                AE_Q: ae_questionmark {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp SQT>, <&kp UNDER>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                
                AE_Q_BSL: ae_questionmark_backslash {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&AE_Q>, <&kp RA(NUBS)>;
                        mods = <(MOD_LALT|MOD_RALT)>;
                };


// Mod for adding < to comma
                COM_PBRO: comma_pbropen {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp COMMA>, <&kp NUBS>;
                        mods = <(MOD_LALT|MOD_RALT)>;
                };
// Mod for adding > to dot
                DOT_PBRC: dot_pbrclosed {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp DOT>, <&kp LS(NUBS)>;
                        mods = <(MOD_LALT|MOD_RALT)>;
                };                

        };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri-layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Z  |  U   |  I  |  O  |  P      | BKSP_DEL_UE |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |OE_EXC_SL| AE_Q_BSL |
// | SHFT |  Y  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,< |  .> |  -      | ENT |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E    &kp R &kp T       &kp Y   &kp U  &kp I       &kp O       &kp P      &BKSP_DEL_UE
   &kp LCTRL &kp A &kp S &kp D    &kp F &kp G       &kp H   &kp J  &kp K       &kp L       &OE_EXC_SL &AE_Q_BSL
   &kp LSHFT &kp Z &kp X &kp C    &kp V &kp B       &kp N   &kp M  &COM_PBRO   &DOT_PBRC   &kp FSLH   &kp RET
                         &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2  &kp LALT
                        >;
                };      

                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5        |   |  6  |  7  |  8  |  9  |  -  | BKSP_DEL_UE |
// | CTRL |AlTab| LFT |  UP | DWN | RGT       |   |  *  |  4  |  5  |  6  |  +  |  =  |
// | SHFT |C_PP |C_MUT| HOM | END |BKSP_DEL_UE|   |  /  |  1  |  2  |  3  |  .  | ENT |
//                    | GUI |     | SPC       |   | ENT |     |  0  |
                        bindings = <
   &kp ESC   &kp N1           &kp N2     &kp N3     &kp N4    &kp N5       &kp N6          &kp N7  &kp N8  &kp N9  &kp KP_MINUS &BKSP_DEL_UE
   &kp LCTRL &kp LA(TAB)      &kp LEFT   &kp UP     &kp DOWN  &kp RIGHT    &kp KP_MULTIPLY &kp N4  &kp N5  &kp N6  &kp KP_PLUS  &kp RPAR
   &kp LSHFT &kp C_PLAY_PAUSE &kp C_MUTE &kp HOME   &kp END   &BKSP_DEL_UE &kp KP_DIVIDE   &kp N1  &kp N2  &kp N3  &kp KP_DOT   &kp KP_ENTER
                                         &kp LGUI   &trans    &kp SPACE    &kp RET         &trans  &kp N0
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  +  |  "  |  *  |  ç  |  %  |   |  &  |  /  |  (  |  )  |  =  |  ^   |
// | CTRL |  °  |  @  |  #  |     |PG_UP|   |     |     |  [  |  ]  | "|" |  '   |
// | SHFT | CAPS|     |BACK |FWD  |PG_DN|   |     |     |  {  |  }  |  $  |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB   &kp PLUS  &kp AT     &kp HASH      &kp DLLR          &kp PRCNT        &kp CARET &kp AMPS  &kp ASTRK      &kp LPAR     &kp RPAR     &kp EQUAL
   &kp LCTRL &kp TILDE &kp RA(N2) &kp RA(N3)    &none             &kp PG_UP        &none     &none     &kp RA(LBKT)   &kp RA(RBKT) &kp RA(N7)   &kp MINUS
   &kp LSHFT &kp CAPS  &none      &kp C_AC_BACK &kp C_AC_FORWARD  &kp PG_DN        &none     &none     &kp RA(SQT)    &kp RA(BSLH) &kp BSLH     &kp RA(EQUAL)
                                  &kp LGUI      &trans            &kp SPACE    &kp RET   &trans    &kp LALT
                        >;
                };


                tri_layer {
// -----------------------------------------------------------------------------------------
// |  TAB | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 |     |
// | CTRL | F11 | F12 |     |     |     |   |     |     |     |     |     |     |
// | SHFT |     |     |     |     |     |   | BT1 | BT2 | BT3 | BT4 | BT5 |BTCLR|
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = < 
   &kp  TAB  &none  &none &none    &none   &none       &none        &none        &none        &none        &none        &none
   &kp LCTRL &none  &none &none    &none   &none       &none        &none        &none        &none        &none        &none
   &kp LSHFT &none  &none &none    &none   &none       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
                          &kp LGUI &trans  &kp SPACE   &kp RET      &trans       &kp LALT
                        >;
                };

      
        };
};
